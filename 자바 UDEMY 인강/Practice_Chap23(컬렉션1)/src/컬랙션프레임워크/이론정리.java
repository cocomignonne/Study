package 컬랙션프레임워크;
// 별개로 인터페이스를 사용하면 공통적인 추상클래스를 제공하기 때문에 정형화된 프로그램을 구현할 수 있다.
public class 이론정리 {
/*
 배열은 저장할 수 있는 객체의 수가 생성될 때 결정되기 때문에 정적이다. (객체를 삭제하게되면 해당인덱스가 비어있는 상태가 되어 버린다.)
  
 컬랙션 : 수집하다 / 틀 => 객체(주소)를 수집하다.
 		객체들을 효율적으로 추가 삭제 검색을 할 수 있다.
 		또한 인터페이스를 활용하여 정형화된 방법으로 다양한 컬렉션 클래스를 이용할 수 있다. 
 
 컬랙션의 종류(인터페이스로 되어 있음)
 
 List (ArrayList / LinkedList / Vector / Stack) 
 배열과 유사하게 인덱스로 관리  (ex.대기자명단)
 순서를 유지하고 중복저장이 가능
 Collection인터페이스에 비해서 index가 매개값으로 추가된다
 ArrayList(배열기반)
 List<String> list = new ArrayList<String>();
 초기용량 10(따로지정가능) 용량을 초과하는 객체가 들어오면 자동적으로 10개가 더 추가됨
 객체를 제거하면 뒤의 인덱스들이 앞으로 당겨진다.
 ㄴ list.remove(2)라는 메소드 안에 배열을 복사하는 System.arraycopy()가 실행되고
    마지막 데이터는 null로 변경된다 (list[size-1] = null;)
    그리고 데이턱 삭제되였으므로 list의 size값을 감소시킨다(size--;)
 단, 마지막객체부터 삭제하는 경우 배열복사가 일어나지 않는다.
 
 Set (HashSet . TreeSet)
 집합과 유사 (ex. 네발달린 동물, 소수의 집합)
 순서를 저장하지 않고 중복저장을 허용하지 않는다 
 
 Map (HashMap / TreeMap / HashTable / Properties)
 키와 값의 쌍으로 관리(앤트리맵) (ex. 아이디-패스워드, 우편번호 )
 키는 중복저장이 되지 않는다
 순서를 유지하지 않는다
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 */
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
